package uipages;
import java.io.IOException;

import javax.faces.application.ResourceHandler;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.annotation.WebFilter;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

//A filter to include only pages in restricted folder.
//Helps in maintaining session or invalid access of users browsing history
@WebFilter(filterName = "LoginFilter", urlPatterns = {"/jsfXhtmlPages/restricted/*"})
public class LoginFilter implements Filter {

     //Constructor
    public LoginFilter() {
    }

	//init section	
    @Override
    public void init(FilterConfig filterConfig) throws ServletException {
         
    }
 
	//doFilter scetion which allows pages from only restricted folder 
    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
         try {
 
            // check whether session variable is set
            HttpServletRequest req = (HttpServletRequest) request;
            HttpServletResponse res = (HttpServletResponse) response;
            HttpSession ses = req.getSession(false);
            //  allow user to proceed if url is login.xhtml or user logged in or user is accessing any page in //public folder
            String reqURI = req.getRequestURI();

            res.setHeader("Cache-Control", "no-cache, no-store, must-revalidate"); // HTTP 1.1.
            res.setHeader("Pragma", "no-cache"); // HTTP 1.0.
            res.setDateHeader("Expires", 0); // Proxies.

            if ( reqURI.indexOf("/restricted/") >= 0 && (ses != null && ses.getAttribute("username") != null) || reqURI.contains("javax.faces.resource") )
            {	
            	chain.doFilter(request, response);           
            }
            else   // user didn't log in but asking for a page that is not allowed so take user to login page
            	res.sendRedirect(req.getContextPath() + "/jsfXhtmlPages/login.xhtml");  // Anonymous user. Redirect to login page
         }
         catch(Throwable t) {
        	 System.out.println( t.getMessage());
         }
    } //doFilter
 
	//destroy filter section
    @Override
    public void destroy() {
         
    }
}
